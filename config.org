#+TITLE: config
#+AUTHOR: Osmium_1008
#+STARTUP: show2levels

* compile
ここのコードを実行すればコンパイルまでされる感じにしておきたい とりあえず出力機構だけ
#+begin_src emacs-lisp :results file :file config_babel.log :output-dir log/
  (let ((current_dir (file-name-directory (buffer-file-name))))
    (cd (concat current_dir "plugins/ddskk"))
    (add-to-list 'load-path (concat current_dir "plugins/ddskk"))
    (add-to-list 'load-path (concat current_dir "plugins/ddskk/test"))
    (add-to-list 'load-path (concat current_dir "plugins/posframe"))
    (async-shell-command "/usr/bin/make")
    (cd current_dir)
    (let ((lisp_dir (concat current_dir "lisp")))
      (unless (file-directory-p lisp_dir) (mkdir lisp_dir)))
    (org-babel-tangle-file (concat current_dir "custom-azik.org"))
    (cd current_dir))
  (org-babel-tangle)
#+end_src

#+RESULTS:
[[file:log/config_babel.log]]

こっちはバイトコンパイルとか 新環境の方でやってね
#+begin_src emacs-lisp :results file :file config_compile.log :output-dir log/
  (let ((current_dir (file-name-directory (buffer-file-name))))
    (byte-recompile-directory current_dir 0 t)
    (native-compile-async current_dir t t)
    (cd current_dir))
#+end_src

#+RESULTS:
[[file:log/config_compile.log]]

* Useful macro
あれば使えそうなマクロをいくつか定義しておく
/lispをload-pathに追加してeval-when-compileで各ファイルから呼びだすもの
** Header
おまじない
#+begin_src emacs-lisp :tangle lisp/osmium1008-defmacros.el
  ;;; osmium1008-defmacros.el --- useful macros -*- coding: utf-8; lexical-binding: t; -*-
  ;; Author: Osmium_1008 (osmium1008@gmail.com)
  ;; Version: 0.1

  ;;; Commentary:
  ;; パッケージ管理はgit submoduleを使うことになった

  ;;; Code:

#+end_src

** load plugin macro
パスを通しやすくしておく
#+begin_src emacs-lisp :tangle lisp/osmium1008-defmacros.el
  (defmacro add-plugin (plugin-name)
    (list 'add-to-list ''load-path
          (list 'eval-when-compile
                (list 'locate-user-emacs-file
                      (list 'concat "plugins/" plugin-name)))))

#+end_src

** wrapper for condition series
#+begin_src emacs-lisp :tangle lisp/osmium1008-defmacros.el
  (defmacro ifac (condition then-form &rest else-form)
    (declare (indent 2))
    (if (eval condition) then-form (if (cadr else-form) `(progn ,@else-form) (car else-form))))

  (defmacro whenac (condition &rest body)
    (declare (indent 1))
    (when (eval condition) (if (cadr body) `(progn ,@body) (car body))))

  (defmacro unlessac (condition &rest body)
    (declare (indent 1))
    (unless (eval condition) (if (cadr body) `(progn ,@body) (car body))))

#+end_src

** OS-distinction
OSやら起動モードやらを判別できるように
#+begin_src emacs-lisp :tangle lisp/osmium1008-defmacros.el
  (defconst my/IS_MAC (eq system-type 'darwin))
  (defconst my/IS_LINUX (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
  (defconst my/IS_WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
  ;; is in terminal: check window-system == nil

#+end_src

** footer
#+begin_src emacs-lisp :tangle lisp/osmium1008-defmacros.el
  (provide 'osmium1008-defmacros)
  ;;; osmium1008-defmacros.el ends here
#+end_src

* Launch routine
起動順序に合わせた設定を行うべきであるため、読込順序を書きつつ順序に合わせた設定を記述することとする。
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][Startup Summary]] も参照
** Before loading early-init.el
おおよそバイナリの起動やらstartup.elの読み込みやらで発生する操作である模様。
ユーザーはいじることができない領域
1. load-path変数の設定(subdirs.el)
2. leim-list.elの読込(IMの初期化?)
3. init-timeの計測開始
4. 言語設定の初期化
   - されていない模様であるが...
5. コマンドオプションの解釈

** 6. Load early-init.el
=package.el= やらGUI設定やらに介入できる設定ファイルらしい。
~--batch~ や ~-q~, ~-Q~ モードでは行われない。
*** Header
いつものおまじない
#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- setting files for GUI etc. -*- coding: utf-8; lexical-binding: t; -*-
  ;; Author: Osmium_1008 (osmium1008@gmail.com)
  ;; Version: 1.0

  ;;; Commentary:
  ;; leaf.elとか使わない形で書き直した。
  ;; 内部処理フレンドリーな形で書き直...せてたらいいなぁ

  ;;; Code:

#+end_src

*** launch cpu profiler
立てておく
#+begin_src emacs-lisp
  (require 'profiler)
  (profiler-start 'cpu)

#+end_src

*** set user lisp dir
.emacs.d/lispを読めるようにしておく 使うので
#+begin_src emacs-lisp :tangle early-init.el
  (add-to-list 'load-path (eval-when-compile (locate-user-emacs-file "lisp")))

#+end_src

*** load macro list
読み出す
#+begin_src emacs-lisp :tangle early-init.el
  (eval-when-compile (require 'osmium1008-defmacros))

#+end_src

*** set some while-initialize settings
magic-file-name: 処理として重い上に使わないため
gc-cons-threshold: そんなGCとか必要になる処理挟まないと思うので
#+begin_src emacs-lisp :tangle early-init.el
  (defconst my/saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (setq gc-cons-threshold most-positive-fixnum)

#+end_src

*** set library path
これやっておかないとelnがエラー吐く
#+begin_src emacs-lisp :tangle early-init.el
  (ifac my/IS_MAC
        (setenv "LIBRARY_PATH"
                (eval-when-compile (string-join
                                    '("opt/homebrew/opt/gcc/lib/gcc/current"
                                      "/opt/homebrew/opt/libgccjit/lib/gcc/current"
                                      "/opt/homebrew/opt/gcc/lib/gcc/current/gcc/aarch64-apple-darwin24/15")
                                    ":")))
        nil)

#+end_src

*** suppress custom output
#+begin_src emacs-lisp :tangle early-init.el
  (with-eval-after-load 'cus-edit
    (setq custom-file (eval-when-compile (locate-user-emacs-file "custom.el"))))

#+end_src

*** options declared in C source code
雑多な設定を書いていく これはここでいいはず
#+begin_src emacs-lisp :tangle early-init.el
  (setq frame-resize-pixelwise t ; ピクセル単位でウィンドウサイズを変更する
        enable-recursive-minibuffers t ; 再帰的に小バッファを積めるようにする
        debug-on-error t ; エラーを吐いた段階でデバッガを起動して情報を出す
        tab-width 4 ; タブ文字は4空白分として表示する。
        user-full-name "Suomi Sawano" ; ここで設定できてしまうらしい
        user-login-name "osmium1008" ; 割といろんなところで使うはずの値
        display-line-numbers nil ; 行番号を表示しない
        history-length 1000 ; 履歴サイズ
        history-delete-duplicates t ; 重複する履歴を消す
        ring-bell-function 'ignore ; ビープ音を鳴らさないようにする
        text-quoting-style 'straight ; 素直な引用符遣いを実現する
        use-dialog-box nil ; yes/noをクリックで選べるようになるらしい いらない
        scroll-preserve-screen-position t ; 画面外にカーソルが出たら移動させる
        scroll-conservatively 100 ; C-n やら C-p で画面外に飛び出した時の挙動の設定らしい 1マスずつ
        use-file-dialog nil ; フォルダをFinderで作らせたりするらしい いらない
        )

#+end_src

*** native compile options
どこで設定するのかよくわからない とりあえずhookを生成しておく
#+begin_src emacs-lisp :tangle early-init.el
  (with-eval-after-load 'comp
    (setq native-comp-speed 3))
  (with-eval-after-load 'comp-run
    (setq native-comp-async-jobs-number 8
          native-comp-always-compile t))
  (with-eval-after-load 'warnings
    ;; native comp の warning を抑える
    (setq warning-suppress-types '((comp))))

#+end_src

** 7. load packages by package.el
elpacaとか使う場合これを抑制しておかなければならない。
こちらも ~--batch~ とか ~-q~, ~-Q~ とかでは行われない。
#+begin_src emacs-lisp :tangle early-init.el
  (with-eval-after-load 'package
    (setq package-enable-at-startup nil))

#+end_src

** 8. initialize window system
~--batch~ でない限りウィンドウシステムの初期化が行われる模様
あまり特筆すべき事柄はない。

** 9. run ~before-init-hook~
発火させるらしい skkがなにやらここで発火させたい処理があるらしいのでここで読み込んでおく
いつも通りの設定...のはず posframeはやっぱり入ってないと変換できないっぽい
ついでにddskk-posframe君も読み込んでおく
#+begin_src emacs-lisp :tangle early-init.el
  (add-plugin "ddskk")
  (with-eval-after-load 'skk-vars
    (require 'custom-azik))
  (with-eval-after-load 'skk-vars
    (setq
     skk-user-directory (eval-when-compile (locate-user-emacs-file "ddskk"))
                                          ; 結局それぞれについて設定しないと動かないことに気付いた これいるのかな...
     skk-jisyo (eval-when-compile (locate-user-emacs-file "ddskk/jisyo"))
     skk-backup-jisyo (eval-when-compile (locate-user-emacs-file "ddskk/jisyo.bak"))
     skk-emacs-id-file (eval-when-compile (locate-user-emacs-file "ddskk/emacs-id"))
     skk-record-file (eval-when-compile (locate-user-emacs-file "ddskk/record"))
     skk-study-file (eval-when-compile (locate-user-emacs-file "ddskk/study"))
     skk-study-backup-file (eval-when-compile (locate-user-emacs-file "ddskk/study.bak"))
     skk-bayesian-history-file (eval-when-compile (locate-user-emacs-file "ddskk/bayesian"))
     skk-bayesian-corpus-file (eval-when-compile (locate-user-emacs-file "ddskk/corpus"))
     skk-egg-like-newline t ; 確定時に改行文字を入力しない
     skk-server-host "localhost" ; skk-serverを使用する
     skk-server-portnum 1178 ; skk-serverを使用する
     skk-init-file "" ; .skkを生成しない 設定はすべてここにある
     skk-byte-compile-init-file nil ; .skkがないのでcompileももちろんしない
     skk-latin-mode-string "_@" ; 'latin modeでの表示
     skk-hiragana-mode-string "あ" ; ひらがな入力での表示
     skk-katakana-mode-string "ア" ; カタカナ入力での表示
     skk-jisx0208-latin-mode-string "Ａ" ; 全角英数
     skk-abbrev-mode-string "aA" ; 省略モード 専らカタカナ英語入力モードとして使われている
     skk-henkan-strict-okuri-precedence t ; 賢い送り仮名変換
     skk-delete-implies-kakutei nil ; 削除入力をしたときに確定してから削除する...のかな? 使わないからわからん
     skk-delete-okuri-when-quit t ; 送り仮名入力をやめたときに送り仮名を残さない
     skk-indicator-prefix "SKK:[" ; それっぽいインジケータ
     skk-indicator-suffix-func #'(lambda (mode) "]")
     skk-use-color-cursor nil ; 色は固定 モードぐらい脳が覚えてる...はず
     skk-indicator-use-cursor-color nil ; 同じく
     skk-use-face t ; どうせフルカラー環境で使うので...
     skk-henkan-face 'face-for-skk-henkan ; あとで定義する
     skk-isearch-start-mode 'latin)) ; そもそもisearchはあまり使わなくなる気もするが...
  (with-eval-after-load 'skk-vars
    (custom-set-faces
     '(skk-prefix-hiragana-face ((t :inherit underline)))
     '(skk-prefix-katakana-face ((t :inherit underline)))))
  (require 'skk-autoloads)
  (setq default-input-method "japanese-skk"
        skk-preload nil)
  ;; ddskk-posframe: 見慣れたポップアップでの補完ウィンドウを出してくれる
  (add-plugin "posframe")
  (add-plugin "ddskk-posframe")
  (add-hook 'skk-mode-hook
            (lambda nil
              (if window-system
                  (require 'ddskk-posframe)
                (setq skk-show-inline t))))
  (with-eval-after-load 'ddskk-posframe
    (ddskk-posframe-mode t))
  (with-eval-after-load 'ddskk-posframe
    (setq ddskk-posframe-border-width 2))

#+end_src

** 10. create graphical frame, 11. set default face and bars
~--batch~ とか =daemon= モードだと発火しない。
このタイミングでフォントとかメニューとかGUIに関する設定を読む。のでそういった設定を書いておく。
default-frame-alistはいろんなところで読み取られるので割と便利
#+begin_src emacs-lisp :tangle early-init.el
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(font . "UDEV Gothic NFLG-13")) ; set-face-attr より速い
                                          ; mode 関連
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (ifac my/IS_MAC
        (with-eval-after-load 'menu-bar
          (if (daemonp)
              (add-hook 'server-after-make-frame-hook
                        (lambda nil (menu-bar-mode -1)))
            (add-hook 'after-init-hook ;; load直後だとなんか上手く行かなかった。
                      (lambda nil (menu-bar-mode -1)))))
        (menu-bar-mode -1))
                                          ; load theme & vc-edited-state の初回埋め込み
  (eval-and-compile
    (add-plugin "ef-themes")
    (require 'ef-themes)
    (ef-themes-select 'ef-frost))
  (with-eval-after-load 'vc-hooks
    (custom-set-faces
     `(vc-edited-state
       ((t :foreground ,(eval-when-compile (ef-themes-get-color-value 'accent-3)) :inherit bold)))))
  (with-eval-after-load 'vc-hooks
    (add-hook 'ef-themes-post-load-hook
              (lambda nil
                (custom-set-faces
                 `(vc-edited-state
                   ((t :foreground ,(ef-themes-get-color-value 'accent-3) :inherit bold)))))))
  (with-eval-after-load 'ddskk-posframe ; グレーっぽい候補ウィンドウを出してくれる しかもいい感じにそれぞれのテーマの色に追従してくれる
    (custom-set-faces
     `(ddskk-posframe ((t
                        :foreground ,(eval-when-compile (ef-themes-get-color-value 'fg-dim))
                        :background ,(eval-when-compile (ef-themes-get-color-value 'bg-dim))
                        )))
     `(ddskk-posframe-border ((t
                               :background ,(eval-when-compile (ef-themes-get-color-value 'bg-alt)))))))
  (with-eval-after-load 'ddskk-posframe
    (add-hook 'ef-themes-post-load-hook
              (lambda nil
                (custom-set-faces
                 `(ddskk-posframe ((t
                                    :foreground ,(ef-themes-get-color-value 'fg-dim)
                                    :background ,(ef-themes-get-color-value 'bg-dim)
                                    )))
                 `(ddskk-posframe-border ((t :background ,(ef-themes-get-color-value 'bg-alt))))))))
  (with-eval-after-load 'skk-vars
    (progn
      (setq skk-inline-show-background-color (eval-when-compile (ef-themes-get-color-value 'bg-main)))
      (defface
        face-for-skk-henkan
        `((t :foreground ,(eval-when-compile (ef-themes-get-color-value 'fg-alt))))
        "変換中の文字の表示に関するface"
        :group 'skk-visual)
      (add-hook 'ef-themes-post-load-hook
                (lambda nil
                  (setq
                   skk-inline-show-background-color (ef-themes-get-color-value 'bg-main))
                  (custom-set-faces `(face-for-skk-henkan
                                      ((t :foreground ,(ef-themes-get-color-value 'fg-alt)))))))))

#+end_src

** 12. custom-reevaluate-setting
するらしい

** 13. load site-start.el
ない ~--batch~ や ~-Q~ などでは発火しない

** early-init.el footer
early-init.elの領域はここまでなのでフッタを書く
#+begin_src emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

** 14. load init.el
だいたいの設定を書くファイル このタイミングでは発火させないものも結構多い
例によって ~--batch~ や ~-q~, ~-Q~ などでは発火しない
*** Header
#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --- Emacs initial settings -*- coding: utf-8; lexical-binding: t; -*-
  ;; Author: Osmium_1008 (osmium1008@gmail.com)
  ;; Version: 0.1

  ;;; Commentary:
  ;; パッケージ管理はgit submoduleを使うことになった

  ;;; Code:

#+end_src

*** load macro list
#+begin_src emacs-lisp :tangle init.el
  (eval-when-compile (require 'osmium1008-defmacros))

#+end_src

*** define get hist function
解析に便利そうなので用意しておく
#+begin_src emacs-lisp :tangle init.el
  (defun get-loaded-elisps
      nil
    (replace-regexp-in-string
     "\n" " " (replace-regexp-in-string
               "^.*/\\(.*\\.\\(elc\\|el\\)\\).*$" "\\1" (replace-regexp-in-string " (\"" "\n(\"" (prin1-to-string load-history)))))

#+end_src

*** disable IME
多分DDSKK使うけどfcitxは手動で止める必要があるっぽいので
0.02/0.01: たぶんこれなら上手くいく
when window-system: -nwは別口で止めたいので
#+begin_src emacs-lisp :tangle init.el
  (whenac my/IS_LINUX
          (if (daemonp)
              (add-hook 'server-after-make-frame-hook
                        (lambda nil
                          (when window-system
                            (sleep-for 0.02)
                            (make-process
                             :name "fcitx5-remote"
                             :command '("fcitx5-remote" "-s" "keyboard-us")))))
            (when window-system
              (add-hook 'after-init-hook
                        (lambda nil
                          (sleep-for 0.01)
                          (make-process
                           :name "fcitx5-remote"
                           :command '("fcitx5-remote" "-s" "keyboard-us")))))))

#+end_src

*** settings
基本的な設定を書いていく がここで設定する値って少なそう
#+begin_src emacs-lisp :tangle init.el
  (let ((udg (font-spec :family "UDEV Gothic NFLG" :height 130))) ; 書いておかないとフォントバグる
    (set-fontset-font t 'katakana-jisx0201 udg)
    (set-fontset-font t 'katakana-sjis udg)
    (set-fontset-font t 'japanese-jisx0213-a udg)
    (set-fontset-font t 'latin-jisx0201 udg)
    (set-fontset-font t 'japanese-jisx0208 udg)
    (set-fontset-font t 'japanese-jisx0208-1978 udg)
    (set-fontset-font t 'japanese-jisx0212 udg)
    (set-fontset-font t 'japanese-jisx0213-1 udg)
    (set-fontset-font t 'japanese-jisx0213-2 udg)
    (set-fontset-font t 'japanese-jisx0213.2004-1 udg))

  (global-set-key (kbd "M-ESC ESC") 'keyboard-quit) ; ESC3連打とC-gの挙動を合わせる
  (setq user-mail-address "osmium1008@gmail.com")

  (with-eval-after-load 'mwheel
    (setq mouse-wheel-scroll-amount '(1 ((control) . 5)) ; マウスホイールの進み方 5マス進めるよ
          mouse-wheel-tilt-scroll t)) ; 横スクロール

  (with-eval-after-load 'simple
    (setq kill-read-only-ok t
    	kill-whole-line t))
  (with-eval-after-load 'simple
    (setopt indent-tabs-mode nil)) ; setqだとなにかしらのタイミングが合ってない

  (setq tab-always-indent t) ; indent.elはwith-eval-after-loadを発火させない

  (setq auto-save-file-name-transforms ; file.elもwith-eval-after-loadを発火させない
        `((".*" ,(eval-when-compile(locate-user-emacs-file "backup/")) t))
        backup-directory-alist
        `((".*" . ,(eval-when-compile(locate-user-emacs-file "backup"))))
        version-control t
        delete-old-versions t
        auto-save-visited-interval 30)

  (with-eval-after-load 'vc-git
    (advice-add 'vc-git-mode-line-string :filter-return
                (lambda (str) (replace-regexp-in-string "Git." "" str))))

  (with-eval-after-load 'mule-cmds
    (prefer-coding-system 'utf-8-unix))

  (require 'which-key)
  (which-key-setup-side-window-right-bottom)
  (which-key-mode)

  (require 'delsel)
  (delete-selection-mode)

  (require 'elec-pair)
  (electric-pair-mode)

  ;;(require 'hl-line)
  ;;(global-hl-line-mode)

  (require 'paren)
  (show-paren-mode)

  (defvar my/is-autorevert-loaded nil)
  (add-hook 'find-file-hook ; なにかファイルを開いたら有効化する
            (lambda nil
              (unless my/is-autorevert-loaded
                (setq my/is-autorevert-loaded t)
                (require 'autorevert))
              (global-auto-revert-mode t)))

#+end_src

** 15. load default.el
いつもの3モードやら ~inhibit-default-init~ が有効化されてた場合行われない。
一応無効化だけやっておくか...
#+begin_src emacs-lisp :tangle init.el
  (setq inhibit-default-init t)

#+end_src

** 16. load abbrev file
~abbrev-file-name~ に設定された略称記録ファイル(?)を読み出す。
~--batch~ では発火しない。

** 17. stop init-time timer
起動時間はここまでを測っている模様
なので次以降のステップでかかる時間は ~emacs-init-time~ では持ってこれない

** 18. run after-init-hook and delayed-warnings-hook
after-init-hookに引っ掛けられた設定を有効化した上で、初期化中の溜め込まれた警告メッセージを吐く。
Elpacaはこの段階で諸々のインストールを行う模様

** 19. set major-mode
~initial-major-mode~ に従ってmajor-modeを設定する。
major-modeに引っ掛けるhookはここで発動するけど場合によってはelpacaの読み込み処理は終わっていないので注意が必要。
*** org-mode
#+begin_src emacs-lisp :tangle init.el
  (with-eval-after-load 'org
    (setq org-startup-folded 'content))
  (add-hook 'org-mode-hook
            (lambda nil (setq org-use-speed-commands t)))

#+end_src

** 20. run tty-setup-hook
~-nw~ (あるいはそれ相当)で実行されていて ~--batch~ でなければ発火する。
=emacsclient= 利用だと初回接続時だけ発火するっぽい。

** 21. display initial echo area message
どうやら "C-h C-a でGNU Emacsに関する情報を表示できますよ" ってやつのことらしい。
~inhibit-startup-echo-area-message~ で抑制できる。
#+begin_src emacs-lisp :tangle init.el
  (setq inhibit-startup-echo-area-message "osmium1008") ; setoptだと動かない

#+end_src

** 22. process command-line options
まだ実行されてないオプションがあれば実行する。
何がここで実行されるんだっけ...

** 23. exit Emacs when emacs launched as ~--batch~ mode
~--batch~ はここまで

** 24. initialize *scratch* buffer
空の *scratch* が存在すれば初期メッセージを吐く

** 25. show file specified by ~initial-buffer-choice~
ファイルが引数として与えられてれば追加で表示する。
nilなら引数のファイルか *startup* か、あるいは *scratch* を単独で表示する模様。

** 26. run emacs-startup-hook
ここで実行すべき処理も思い浮かばないが、実行されるらしい。

** 27. modify frame parameter if changed by init.el
default-frame-alistとかが変更されてればここで反映する。

** 28. run window-setup-hook
27.を発火させてるか否かしか26.との変化がない 多分どちらも使わない...

** 29. display startup screen
しないで
~--no-splash~ や ~-Q~ でも抑制される 本当に?
#+begin_src emacs-lisp :tangle init.el
  (setq inhibit-startup-screen t)

#+end_src

** 30. launch emacs daemon
~--daemon~ とかで起動していたらその起動を行う。

** 31. restore emacs-session
Xセッションマネージャーの機能らしい 使わない気がする。

** extra. server-after-make-frame-hook
上の方で何度か出てきているフック
emacsclientの起動時に発火するものでそちらで起動している場合設定はここで行わなければいけないらしい。

** extra. with-eval-after-load
対象パッケージが読み込まれ次第発火するhook まあ適当に使うといい

** restore while-initialize settings to default
#+begin_src emacs-lisp :tangle init.el
  (setq file-name-handler-alist my/saved-file-name-handler-alist)
  (setq gc-cons-threshold (eval-when-compile (* 1024 1024 128)))

#+end_src

** init.el footer
起動ルーチンはここまで。
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)
  ;;; init.el ends here
#+end_src
